// ThumbnailRenderer.cpp : Implementation of CThumbnailRenderer

#include "stdafx.h"
#include "ThumbnailRenderer.h"
#include <RWThumbnailProvider.h>

#include <RWImaging.h>
#include <Resampling.h>
#include <Win32LangEx.h>
#include <MultiLanguageString.h>
#include <RWBaseEnumUtils.h>


// helper functions


HRESULT RescaleImage(ULONG a_nSrcSizeX, ULONG a_nSrcSizeY, DWORD const* a_pSrcData, bool a_bSrcAlpha, ULONG a_nSizeX, ULONG a_nSizeY, DWORD* a_pBGRAData, RECT* a_prcBounds)
{
	if (a_nSizeX >= a_nSrcSizeX && a_nSizeY >= a_nSrcSizeY)
	{
		// no resizing -> center in dst rectangle
		ZeroMemory(a_pBGRAData, a_nSizeX*a_nSizeY*4); // being lazy
		DWORD* p = a_pBGRAData + a_nSizeX*((a_nSizeY-a_nSrcSizeY)>>1) + ((a_nSizeX-a_nSrcSizeX)>>1);
		DWORD const dwOr  = a_bSrcAlpha ? 0 : 0xff000000;
		for (ULONG y = 0; y < a_nSrcSizeY; ++y)
		{
			for (ULONG x = 0; x < a_nSrcSizeX; ++x)
			{
				*p = dwOr|*a_pSrcData;
				++p;
				++a_pSrcData;
			}
			p += a_nSizeX-a_nSrcSizeX;
		}
		if (a_prcBounds)
		{
			a_prcBounds->left = (a_nSizeX-a_nSrcSizeX)>>1;
			a_prcBounds->top = (a_nSizeY-a_nSrcSizeY)>>1;
			a_prcBounds->right = a_prcBounds->left+a_nSrcSizeX;
			a_prcBounds->bottom = a_prcBounds->top+a_nSrcSizeY;
		}
		return S_OK;
	}

	LONG nDstSizeX;
	LONG nDstSizeY;
	DWORD* pDst;
	if (a_nSizeX*a_nSrcSizeY < a_nSizeY*a_nSrcSizeX)
	{
		nDstSizeX = a_nSizeX;
		nDstSizeY = (a_nSizeX*a_nSrcSizeY+(a_nSrcSizeX>>1))/a_nSrcSizeX;
		pDst = a_pBGRAData+((a_nSizeY-nDstSizeY)>>1)*a_nSizeX;
		ZeroMemory(a_pBGRAData, (pDst-a_pBGRAData)*4);
		ZeroMemory(pDst+a_nSizeX*(nDstSizeY), a_nSizeX*(a_nSizeY-nDstSizeY-((a_nSizeY-nDstSizeY)>>1))*4);
		if (a_prcBounds)
		{
			a_prcBounds->left = 0;
			a_prcBounds->top = (a_nSizeY-nDstSizeY)>>1;
			a_prcBounds->right = a_nSizeX;
			a_prcBounds->bottom = a_prcBounds->top+nDstSizeY;
		}
	}
	else
	{
		nDstSizeX = (a_nSizeY*a_nSrcSizeX+(a_nSrcSizeY>>1))/a_nSrcSizeY;
		nDstSizeY = a_nSizeY;
		pDst = a_pBGRAData+((a_nSizeX-nDstSizeX)>>1);
		for (ULONG y = 0; y < a_nSizeY; ++y)
		{
			DWORD* pLine = a_pBGRAData+a_nSizeX*y;
			ZeroMemory(pLine, (pDst-a_pBGRAData)*4);
			ZeroMemory(pLine+(pDst-a_pBGRAData)+nDstSizeX, (a_nSizeX-(pDst-a_pBGRAData)-nDstSizeX)*4);
		}
		if (a_prcBounds)
		{
			a_prcBounds->left = (a_nSizeX-nDstSizeX)>>1;
			a_prcBounds->top = 0;
			a_prcBounds->right = a_prcBounds->left+nDstSizeX;
			a_prcBounds->bottom = a_nSizeY;
		}
	}
	float const fGamma = 2.2f;
	if (a_bSrcAlpha)
	{
		if (fGamma == 1.0f)
		{
			CResampling cRsmp(nDstSizeX, nDstSizeY, a_nSrcSizeX, a_nSrcSizeY, reinterpret_cast<TRasterImagePixel*>(pDst), a_nSizeX*4, reinterpret_cast<TRasterImagePixel const*>(a_pSrcData), a_nSrcSizeX*4);
			cRsmp.Linear();
		}
		else
		{
			CGammaResampling cRsmp(fGamma, nDstSizeX, nDstSizeY, a_nSrcSizeX, a_nSrcSizeY, reinterpret_cast<TRasterImagePixel*>(pDst), a_nSizeX*4, reinterpret_cast<TRasterImagePixel const*>(a_pSrcData), a_nSrcSizeX*4);
			cRsmp.Linear();
		}
	}
	else
	{
		if (fGamma == 1.0f)
		{
			CResamplingRGBX8 cRsmp(nDstSizeX, nDstSizeY, a_nSrcSizeX, a_nSrcSizeY, reinterpret_cast<SResamplingRGBX8*>(pDst), a_nSizeX*4, reinterpret_cast<SResamplingRGBX8 const*>(a_pSrcData), a_nSrcSizeX*4);
			cRsmp.Linear();
		}
		else
		{
			CGammaResamplingRGBX8 cRsmp(fGamma, nDstSizeX, nDstSizeY, a_nSrcSizeX, a_nSrcSizeY, reinterpret_cast<SResamplingRGBX8*>(pDst), a_nSizeX*4, reinterpret_cast<SResamplingRGBX8 const*>(a_pSrcData), a_nSrcSizeX*4);
			cRsmp.Linear();
		}
	}
	return S_OK;
}

// CThumbnailRenderer

STDMETHODIMP CThumbnailRenderer::GetThumbnail(IDocument* a_pDoc, ULONG a_nSizeX, ULONG a_nSizeY, DWORD* a_pBGRAData, RECT* a_prcBounds, LCID a_tLocaleID, BSTR* a_pbstrInfo)
{
	try
	{
		if (a_pbstrInfo)
			*a_pbstrInfo = NULL;

		if (a_pDoc == NULL)
		{
			// a 36x48 image used for unavailable documents (gray and alpha channels)
			static BYTE const s_aImage[36*48*2] =
			{
				//0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x0c, 0x00, 0x3e, 0x49, 0x61, 0x3c, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6a, 0x37, 0x6c, 0x38, 0x72, 0x4e, 0x62, 0x3f, 0x30, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x01, 0x00, 0x27, 0x00, 0xd9, 0xe2, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf5, 0xff, 0xf1, 0xfb, 0xda, 0xac, 0x65, 0x44, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x38, 0x00, 0xe2, 0xd9, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf6, 0xff, 0xf3, 0xff, 0xe7, 0xfd, 0xc8, 0xae, 0x69, 0x3f, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf5, 0xff, 0xe3, 0xff, 0xbf, 0xfb, 0xf6, 0xa3, 0x54, 0x37, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf6, 0xff, 0xd9, 0xff, 0xba, 0xff, 0xff, 0xf8, 0xf0, 0x95, 0x3e, 0x2f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xca, 0xff, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xf4, 0xe6, 0x88, 0x2b, 0x28, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf8, 0xff, 0xf6, 0xff, 0xbb, 0xff, 0xbc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xdb, 0x7b, 0x1a, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf2, 0xff, 0xaa, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0xce, 0x71, 0x11, 0x1d, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf6, 0xff, 0xec, 0xff, 0x9a, 0xff, 0xcc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc2, 0x68, 0x06, 0x1a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf5, 0xff, 0xdf, 0xff, 0x8d, 0xff, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xb9, 0x62, 0x02, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf6, 0xff, 0xf4, 0xff, 0xd1, 0xff, 0x80, 0xff, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0xb0, 0x5f, 0x02, 0x17, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf5, 0xff, 0xef, 0xff, 0xc3, 0xff, 0x77, 0xff, 0x70, 0xff, 0x7b, 0xff, 0x86, 0xff, 0x93, 0xff, 0xa1, 0xff, 0xb2, 0xff, 0xc5, 0xff, 0xdc, 0xff, 0xf8, 0xd6, 0xb1, 0x5f, 0x02, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xea, 0xff, 0xb6, 0xff, 0x71, 0xff, 0x61, 0xff, 0x63, 0xff, 0x64, 0xff, 0x65, 0xff, 0x67, 0xff, 0x6c, 0xff, 0x71, 0xff, 0x77, 0xff, 0x7e, 0xff, 0x9d, 0xd4, 0x78, 0x53, 0x00, 0x0d, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf1, 0xff, 0xe0, 0xff, 0xbc, 0xff, 0x8d, 0xff, 0x8b, 0xff, 0x97, 0xff, 0xa4, 0xff, 0xb3, 0xff, 0xc4, 0xff, 0xc6, 0xff, 0xd2, 0xff, 0xdb, 0xff, 0xe0, 0xff, 0xe0, 0xfe, 0xdc, 0xa3, 0x5b, 0x26, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf0, 0xff, 0xe8, 0xff, 0xd1, 0xff, 0xc4, 0xff, 0xcb, 0xff, 0xd5, 0xff, 0xdf, 0xff, 0xe3, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe5, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe1, 0xc0, 0x6c, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xfa, 0xff, 0xfa, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xec, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe9, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xc3, 0x5c, 0x37, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf9, 0xff, 0xf9, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xef, 0xff, 0xee, 0xff, 0xee, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xeb, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xc1, 0x5c, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xef, 0xff, 0xef, 0xff, 0xee, 0xff, 0xed, 0xff, 0xed, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xc0, 0x5c, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf7, 0xff, 0xf6, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xef, 0xff, 0xee, 0xff, 0xed, 0xff, 0xed, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xeb, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf6, 0xff, 0xf5, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xef, 0xff, 0xee, 0xff, 0xee, 0xff, 0xed, 0xff, 0xec, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe2, 0xff, 0xe1, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf5, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf1, 0xff, 0xf1, 0xff, 0xf0, 0xff, 0xef, 0xff, 0xef, 0xff, 0xee, 0xff, 0xed, 0xff, 0xed, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe2, 0xff, 0xe1, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf4, 0xff, 0xf3, 0xff, 0xf2, 0xff, 0xf2, 0xff, 0xf1, 0xfb, 0xd2, 0xe0, 0x98, 0xfd, 0xda, 0xff, 0xee, 0xff, 0xee, 0xff, 0xed, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xe0, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xf3, 0xff, 0xf2, 0xfe, 0xf0, 0xf5, 0xc9, 0xae, 0x80, 0x56, 0x00, 0x50, 0x00, 0x6a, 0x20, 0xe1, 0xab, 0xfe, 0xe7, 0xff, 0xec, 0xff, 0xeb, 0xff, 0xea, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xfb, 0xc7, 0xf2, 0xae, 0xfe, 0xdb, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xdf, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xfe, 0xed, 0xed, 0xbe, 0x96, 0x67, 0x49, 0x00, 0x30, 0x00, 0x1f, 0x00, 0x1b, 0x00, 0x26, 0x00, 0x41, 0x00, 0x90, 0x5f, 0xf7, 0xc7, 0xff, 0xea, 0xff, 0xe9, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xfa, 0xc9, 0xba, 0x82, 0x5b, 0x00, 0x53, 0x00, 0x65, 0x1c, 0xbe, 0x86, 0xf2, 0xb5, 0xfe, 0xda, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xde, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x36, 0x00, 0xcc, 0xae, 0x6e, 0x57, 0x41, 0x00, 0x2b, 0x00, 0x18, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x02, 0x00, 0x07, 0x00, 0x15, 0x00, 0x2c, 0x00, 0x4d, 0x00, 0xc3, 0x8f, 0xfe, 0xd9, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe5, 0xf9, 0xc8, 0xb7, 0x81, 0x4f, 0x00, 0x33, 0x00, 0x22, 0x00, 0x1c, 0x00, 0x22, 0x00, 0x31, 0x00, 0x44, 0x00, 0x69, 0x28, 0xc6, 0x8a, 0xf4, 0xb8, 0xfe, 0xd9, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x00, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x1d, 0x00, 0x14, 0x00, 0x09, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0b, 0x00, 0x1c, 0x00, 0x37, 0x00, 0x6b, 0x2f, 0xe6, 0xb1, 0xfe, 0xe4, 0xf8, 0xc8, 0xb3, 0x7f, 0x4e, 0x00, 0x32, 0x00, 0x1c, 0x00, 0x0d, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x22, 0x00, 0x33, 0x00, 0x43, 0x00, 0x61, 0x42, 0xa0, 0x42, 0x27, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x16, 0x00, 0x15, 0x00, 0x0e, 0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x10, 0x00, 0x24, 0x00, 0x38, 0x00, 0x65, 0x5a, 0x40, 0x00, 0x2f, 0x00, 0x1b, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x14, 0x00, 0x1a, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x16, 0x00, 0x27, 0x00, 0x3b, 0x00, 0x53, 0x2a, 0x6d, 0x67, 0x33, 0x00, 0x1c, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x02, 0x00, 0x08, 0x00, 0x0f, 0x00, 0x14, 0x00, 0x12, 0x00, 0x0b, 0x00, 0x04, 0x00, 0x01, 0x00, 0x03, 0x00, 0x09, 0x00, 0x11, 0x00, 0x16, 0x00, 0x14, 0x00, 0x0d, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x1b, 0x00, 0x2e, 0x00, 0x46, 0x00, 0x84, 0x51, 0xe3, 0xad, 0xfe, 0xde, 0xfe, 0xe2, 0xc7, 0x96, 0x49, 0x00, 0x26, 0x00, 0x0f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x14, 0x00, 0x28, 0x00, 0x3d, 0x00, 0x69, 0x55, 0x44, 0x00, 0x35, 0x00, 0x23, 0x00, 0x14, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x4b, 0x00, 0xaa, 0x7b, 0xf2, 0xbe, 0xfe, 0xe6, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe6, 0xef, 0xb7, 0x67, 0x2a, 0x31, 0x00, 0x16, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x21, 0x00, 0x3e, 0x00, 0x85, 0x51, 0xf4, 0xba, 0xfe, 0xdb, 0xf9, 0xbf, 0xce, 0x8f, 0x6e, 0x2f, 0x44, 0x00, 0x2f, 0x00, 0x1e, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x01, 0x00, 0xb7, 0x8f, 0xfa, 0xd1, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xfc, 0xcf, 0x9d, 0x69, 0x3e, 0x00, 0x1e, 0x00, 0x0b, 0x00, 0x05, 0x00, 0x09, 0x00, 0x18, 0x00, 0x31, 0x00, 0x5a, 0x13, 0xdb, 0x9b, 0xfe, 0xd6, 0xff, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xfe, 0xd4, 0xf1, 0xad, 0xb3, 0x78, 0x55, 0x08, 0x38, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
				//0x01, 0x00, 0x35, 0x00, 0xe4, 0xd7, 0xff, 0xe9, 0xff, 0xe8, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xfe, 0xdd, 0xd5, 0x99, 0x4e, 0x00, 0x2e, 0x00, 0x21, 0x00, 0x2b, 0x00, 0x46, 0x00, 0xaa, 0x72, 0xfc, 0xc6, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xfd, 0xc6, 0xe0, 0xa1, 0x71, 0x27, 0x00, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe7, 0xff, 0xe7, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe1, 0xff, 0xe0, 0xf4, 0xb8, 0x7e, 0x33, 0x59, 0x00, 0x7d, 0x36, 0xee, 0xad, 0xfe, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xc0, 0x5d, 0x29, 0x00, 0x00, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe6, 0xff, 0xe6, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xde, 0xfe, 0xcc, 0xe6, 0x8e, 0xfe, 0xd0, 0xff, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe5, 0xff, 0xe5, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe4, 0xff, 0xe3, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe3, 0xff, 0xe2, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe2, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe1, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xe0, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xdf, 0xff, 0xde, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xdd, 0xff, 0xdd, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x3a, 0x00, 0xe4, 0xd7, 0xff, 0xdc, 0xff, 0xdc, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xc0, 0x5d, 0x35, 0x00, 0x01, 0x00, 
				//0x02, 0x00, 0x39, 0x00, 0xe3, 0xd8, 0xff, 0xdb, 0xff, 0xda, 0xff, 0xda, 0xff, 0xd9, 0xff, 0xd8, 0xff, 0xd8, 0xff, 0xd7, 0xff, 0xd6, 0xff, 0xd6, 0xff, 0xd5, 0xff, 0xd4, 0xff, 0xd4, 0xff, 0xd3, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xff, 0xd2, 0xbc, 0x5f, 0x34, 0x00, 0x01, 0x00, 
				//0x01, 0x00, 0x2b, 0x00, 0xc8, 0xc9, 0xf3, 0xba, 0xf7, 0xb6, 0xf8, 0xb6, 0xf8, 0xb6, 0xf8, 0xb5, 0xf8, 0xb5, 0xf8, 0xb4, 0xf8, 0xb3, 0xf8, 0xb3, 0xf8, 0xb2, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf8, 0xb1, 0xf7, 0xb0, 0xf3, 0xb4, 0x98, 0x61, 0x27, 0x00, 0x01, 0x00, 
				//0x00, 0x00, 0x10, 0x00, 0x3e, 0x00, 0x6a, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x69, 0x00, 0x3c, 0x00, 0x0e, 0x00, 0x00, 0x00, 
				//0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 

				0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x06, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x06, 0x00, 0x24, 0x49, 0x38, 0x3c, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3d, 0x37, 0x3e, 0x38, 0x42, 0x4e, 0x39, 0x3f, 0x1b, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x16, 0x00, 0x7e, 0xe2, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf5, 0x94, 0xf1, 0x92, 0xda, 0x64, 0x65, 0x27, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x20, 0x00, 0x83, 0xd9, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf6, 0x94, 0xf3, 0x94, 0xe7, 0x93, 0xc8, 0x65, 0x69, 0x24, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf7, 0x94, 0xf5, 0x94, 0xe3, 0x94, 0xbf, 0x92, 0xf6, 0x5e, 0x54, 0x20, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf6, 0x94, 0xd9, 0x94, 0xba, 0x94, 0xff, 0x90, 0xf0, 0x56, 0x3e, 0x1b, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf7, 0x94, 0xca, 0x94, 0xbd, 0x94, 0xff, 0x94, 0xff, 0x8e, 0xe6, 0x4f, 0x2b, 0x17, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf8, 0x94, 0xf6, 0x94, 0xbb, 0x94, 0xbc, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x8a, 0xdb, 0x47, 0x1a, 0x13, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf7, 0x94, 0xf2, 0x94, 0xaa, 0x94, 0xc3, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x87, 0xce, 0x41, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf6, 0x94, 0xec, 0x94, 0x9a, 0x94, 0xcc, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x83, 0xc2, 0x3c, 0x06, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf7, 0x94, 0xf5, 0x94, 0xdf, 0x94, 0x8d, 0x94, 0xd7, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x7f, 0xb9, 0x39, 0x02, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf6, 0x94, 0xf4, 0x94, 0xd1, 0x94, 0x80, 0x94, 0xe5, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x94, 0xff, 0x7c, 0xb0, 0x37, 0x02, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf5, 0x94, 0xef, 0x94, 0xc3, 0x94, 0x77, 0x94, 0x70, 0x94, 0x7b, 0x94, 0x86, 0x94, 0x93, 0x94, 0xa1, 0x94, 0xb2, 0x94, 0xc5, 0x94, 0xdc, 0x94, 0xf8, 0x7c, 0xb1, 0x37, 0x02, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xea, 0x94, 0xb6, 0x94, 0x71, 0x94, 0x61, 0x94, 0x63, 0x94, 0x64, 0x94, 0x65, 0x94, 0x67, 0x94, 0x6c, 0x94, 0x71, 0x94, 0x77, 0x94, 0x7e, 0x94, 0x9d, 0x7b, 0x78, 0x30, 0x00, 0x07, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf1, 0x94, 0xe0, 0x94, 0xbc, 0x94, 0x8d, 0x94, 0x8b, 0x94, 0x97, 0x94, 0xa4, 0x94, 0xb3, 0x94, 0xc4, 0x94, 0xc6, 0x94, 0xd2, 0x94, 0xdb, 0x94, 0xe0, 0x94, 0xe0, 0x94, 0xdc, 0x5e, 0x5b, 0x16, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf0, 0x94, 0xe8, 0x94, 0xd1, 0x94, 0xc4, 0x94, 0xcb, 0x94, 0xd5, 0x94, 0xdf, 0x94, 0xe3, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe5, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe1, 0x6f, 0x6c, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xfa, 0x94, 0xfa, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xec, 0x94, 0xe7, 0x94, 0xe7, 0x94, 0xe9, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x71, 0x5c, 0x20, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf9, 0x94, 0xf9, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xf0, 0x94, 0xef, 0x94, 0xee, 0x94, 0xee, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xeb, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x70, 0x5c, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf8, 0x94, 0xf7, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xef, 0x94, 0xef, 0x94, 0xee, 0x94, 0xed, 0x94, 0xed, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x6f, 0x5c, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf7, 0x94, 0xf6, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xf0, 0x94, 0xef, 0x94, 0xee, 0x94, 0xed, 0x94, 0xed, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xeb, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf6, 0x94, 0xf5, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xf0, 0x94, 0xef, 0x94, 0xee, 0x94, 0xee, 0x94, 0xed, 0x94, 0xec, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe2, 0x94, 0xe1, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf5, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf1, 0x94, 0xf1, 0x94, 0xf0, 0x94, 0xef, 0x94, 0xef, 0x94, 0xee, 0x94, 0xed, 0x94, 0xed, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe2, 0x94, 0xe1, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf4, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf2, 0x94, 0xf1, 0x92, 0xd2, 0x82, 0x98, 0x93, 0xda, 0x94, 0xee, 0x94, 0xee, 0x94, 0xed, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xe0, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xf3, 0x94, 0xf2, 0x94, 0xf0, 0x8e, 0xc9, 0x65, 0x80, 0x32, 0x00, 0x2e, 0x00, 0x3d, 0x20, 0x83, 0xab, 0x94, 0xe7, 0x94, 0xec, 0x94, 0xeb, 0x94, 0xea, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x92, 0xc7, 0x8d, 0xae, 0x94, 0xdb, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xdf, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xed, 0x8a, 0xbe, 0x57, 0x67, 0x2a, 0x00, 0x1b, 0x00, 0x12, 0x00, 0x0f, 0x00, 0x16, 0x00, 0x25, 0x00, 0x53, 0x5f, 0x8f, 0xc7, 0x94, 0xea, 0x94, 0xe9, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x91, 0xc9, 0x6c, 0x82, 0x35, 0x00, 0x30, 0x00, 0x3a, 0x1c, 0x6e, 0x86, 0x8d, 0xb5, 0x94, 0xda, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xde, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x1f, 0x00, 0x76, 0xae, 0x40, 0x57, 0x25, 0x00, 0x19, 0x00, 0x0d, 0x00, 0x06, 0x00, 0x02, 0x00, 0x01, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x19, 0x00, 0x2c, 0x00, 0x71, 0x8f, 0x94, 0xd9, 0x94, 0xe7, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe5, 0x91, 0xc8, 0x6a, 0x81, 0x2e, 0x00, 0x1d, 0x00, 0x13, 0x00, 0x10, 0x00, 0x13, 0x00, 0x1c, 0x00, 0x27, 0x00, 0x3d, 0x28, 0x73, 0x8a, 0x8e, 0xb8, 0x94, 0xd9, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x01, 0x00, 0x11, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x10, 0x00, 0x20, 0x00, 0x3e, 0x2f, 0x86, 0xb1, 0x94, 0xe4, 0x90, 0xc8, 0x68, 0x7f, 0x2d, 0x00, 0x1d, 0x00, 0x10, 0x00, 0x07, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x13, 0x00, 0x1d, 0x00, 0x27, 0x00, 0x38, 0x42, 0x5d, 0x42, 0x16, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x09, 0x00, 0x14, 0x00, 0x20, 0x00, 0x3a, 0x5a, 0x25, 0x00, 0x1b, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x0f, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x22, 0x00, 0x30, 0x2a, 0x3f, 0x67, 0x1d, 0x00, 0x10, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x09, 0x00, 0x0c, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x1a, 0x00, 0x28, 0x00, 0x4c, 0x51, 0x84, 0xad, 0x94, 0xde, 0x94, 0xe2, 0x73, 0x96, 0x2a, 0x00, 0x16, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x17, 0x00, 0x23, 0x00, 0x3d, 0x55, 0x27, 0x00, 0x1e, 0x00, 0x14, 0x00, 0x0b, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x2b, 0x00, 0x63, 0x7b, 0x8d, 0xbe, 0x94, 0xe6, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe7, 0x94, 0xe6, 0x8b, 0xb7, 0x3c, 0x2a, 0x1c, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x13, 0x00, 0x24, 0x00, 0x4d, 0x51, 0x8e, 0xba, 0x94, 0xdb, 0x91, 0xbf, 0x78, 0x8f, 0x40, 0x2f, 0x27, 0x00, 0x1b, 0x00, 0x11, 0x00, 0x09, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x6a, 0x8f, 0x91, 0xd1, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x92, 0xcf, 0x5b, 0x69, 0x24, 0x00, 0x11, 0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x1c, 0x00, 0x34, 0x13, 0x7f, 0x9b, 0x94, 0xd6, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd4, 0x8c, 0xad, 0x68, 0x78, 0x31, 0x08, 0x20, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x1e, 0x00, 0x84, 0xd7, 0x94, 0xe9, 0x94, 0xe8, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xdd, 0x7c, 0x99, 0x2d, 0x00, 0x1a, 0x00, 0x13, 0x00, 0x19, 0x00, 0x28, 0x00, 0x63, 0x72, 0x92, 0xc6, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x93, 0xc6, 0x82, 0xa1, 0x41, 0x27, 0x00, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe7, 0x94, 0xe7, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe1, 0x94, 0xe0, 0x8e, 0xb8, 0x49, 0x33, 0x33, 0x00, 0x48, 0x36, 0x8a, 0xad, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x6f, 0x5d, 0x17, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe6, 0x94, 0xe6, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xcc, 0x86, 0x8e, 0x94, 0xd0, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe5, 0x94, 0xe5, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe4, 0x94, 0xe3, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe3, 0x94, 0xe2, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe2, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe1, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xe0, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xdf, 0x94, 0xde, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xdd, 0x94, 0xdd, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd7, 0x94, 0xdc, 0x94, 0xdc, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6f, 0x5d, 0x1e, 0x00, 0x00, 0x00, 
				0x01, 0x00, 0x21, 0x00, 0x84, 0xd8, 0x94, 0xdb, 0x94, 0xda, 0x94, 0xda, 0x94, 0xd9, 0x94, 0xd8, 0x94, 0xd8, 0x94, 0xd7, 0x94, 0xd6, 0x94, 0xd6, 0x94, 0xd5, 0x94, 0xd4, 0x94, 0xd4, 0x94, 0xd3, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x94, 0xd2, 0x6d, 0x5f, 0x1e, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x19, 0x00, 0x74, 0xc9, 0x8d, 0xba, 0x8f, 0xb6, 0x90, 0xb6, 0x90, 0xb6, 0x90, 0xb5, 0x90, 0xb5, 0x90, 0xb4, 0x90, 0xb3, 0x90, 0xb3, 0x90, 0xb2, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x90, 0xb1, 0x8f, 0xb0, 0x8d, 0xb4, 0x58, 0x61, 0x16, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x09, 0x00, 0x24, 0x00, 0x3d, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x45, 0x00, 0x3d, 0x00, 0x22, 0x00, 0x08, 0x00, 0x00, 0x00, 
				0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
			};
			ZeroMemory(a_pBGRAData, a_nSizeX*a_nSizeY*sizeof*a_pBGRAData);
			if (a_nSizeX >= 36 && a_nSizeY >= 48)
			{
				// center
				BYTE const* pS = s_aImage;
				DWORD* p = a_pBGRAData + ((a_nSizeY-48)>>1)*a_nSizeX + ((a_nSizeX-36)>>1);
				for (ULONG y = 0; y < 48; ++y)
				{
					for (ULONG x = 0; x < 36; ++x)
					{
						BYTE* const pD = reinterpret_cast<BYTE*>(p);
						pD[0] = pD[1] = pD[2] = pS[1];
						pD[3] = pS[0];
						++p;
						pS += 2;
					}
					p += a_nSizeX-36;
				}
				if (a_prcBounds)
				{
					a_prcBounds->left = (a_nSizeX-36)>>1;
					a_prcBounds->top = (a_nSizeY-48)>>1;
					a_prcBounds->right = a_prcBounds->left+36;
					a_prcBounds->bottom = a_prcBounds->top+48;
				}
				return S_OK;
			}
			else
			{
				// rescale
				CAutoVectorPtr<DWORD> cRGBA(new DWORD[36*48]);
				BYTE const* pS = s_aImage;
				DWORD* p = cRGBA;
				for (ULONG y = 0; y < 48; ++y)
				{
					for (ULONG x = 0; x < 36; ++x)
					{
						BYTE* const pD = reinterpret_cast<BYTE*>(p);
						pD[0] = pD[1] = pD[2] = pS[1];
						pD[3] = pS[0];
						++p;
						pS += 2;
					}
				}
				return RescaleImage(36, 48, cRGBA, true, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds);
			}
		}

		CComPtr<IPlugInCache> p;
		RWCoCreateInstance(p, __uuidof(PlugInCache));
		CComPtr<IEnumUnknowns> pObjects;
		p->InterfacesEnum(CATID_ThumbnailProvider, IID_IThumbnailProvider, 0, &pObjects, NULL);
		std::vector<CComPtr<IThumbnailProvider>> providers;
		ULONG nObjects = 0;
		if (pObjects) pObjects->Size(&nObjects);
		for (ULONG i = 0; i < nObjects; ++i)
		{
			CComPtr<IThumbnailProvider> pTP;
			pObjects->Get(i, &pTP);
			ULONG prio = pTP->Priority();
			std::vector<CComPtr<IThumbnailProvider>>::const_iterator j = providers.begin();
			while (j != providers.end())
			{
				if (j->operator IThumbnailProvider *()->Priority() > prio)
					break;
				++j;
			}
			providers.insert(j, pTP);
		}

		
		for (std::vector<CComPtr<IThumbnailProvider>>::const_iterator i = providers.begin(); i != providers.end(); ++i)
		{
			HRESULT hRes = i->operator IThumbnailProvider * ()->GetThumbnail(a_pDoc, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, a_pbstrInfo, RescaleImage);
			if (hRes != E_RW_UNKNOWNINPUTFORMAT)
				return hRes;
		}
		return E_RW_UNKNOWNINPUTFORMAT;
	}
	catch (...)
	{
		return a_pBGRAData ? E_UNEXPECTED : E_POINTER;
	}
}

STDMETHODIMP CThumbnailRenderer::GetThumbnail(IStorageFilter* a_pFile, ULONG a_nSizeX, ULONG a_nSizeY, DWORD* a_pBGRAData, RECT* a_prcBounds, LCID a_tLocaleID, BSTR* a_pbstrInfo)
{
	try
	{
		CComPtr<IDocument> pDoc;

		if (a_pFile == NULL)
			return GetThumbnail(pDoc, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, a_pbstrInfo);

		CComBSTR bstrName;
		a_pFile->ToText(NULL, &bstrName);
		ULONG nNameLen = bstrName.Length();
		if (nNameLen > 9 && 0 == _wcsicmp(bstrName.m_str+nNameLen-9, L".rweffect"))
		{
			// hack for layer effect files
			return GetLayerEffectThumbnail(a_pFile, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, a_pbstrInfo);
		}
		//if (nNameLen > 10 && 0 == _wcsicmp(bstrName.m_str+nNameLen-10, L".rwbatchop"))
		//{
		//	// hack for layer effect files
		//	return GetBatchOperationThumbnail(a_pFile, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, a_pbstrInfo);
		//}

		if (m_pIM == NULL)
		{
			ObjectLock cLock(this);
			if (m_pIM == NULL)
				RWCoCreateInstance(m_pIM, __uuidof(InputManager));
		}
		m_pIM->DocumentCreate(a_pFile, NULL, &pDoc);
		if (pDoc == NULL)
			return E_RW_UNKNOWNINPUTFORMAT;

		return GetThumbnail(pDoc, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, a_pbstrInfo);
	}
	catch (...)
	{
		return a_pBGRAData ? E_UNEXPECTED : E_POINTER;
	}
}

HRESULT CThumbnailRenderer::GetLayerEffectThumbnail(IStorageFilter* a_pFile, ULONG a_nSizeX, ULONG a_nSizeY, DWORD* a_pBGRAData, RECT* a_prcBounds, LCID a_tLocaleID, BSTR* a_pbstrInfo)
{
	return E_FAIL;
	//CComPtr<IDataSrcDirect> pSrc;
	//a_pFile->SrcOpen(&pSrc);
	//ULONG nFileSize = 0;
	//if (pSrc == NULL || FAILED(pSrc->SizeGet(&nFileSize)) || nFileSize == 0)
	//{
	//	// TODO: message
	//	return E_FAIL;
	//}
	//CDirectInputLock cData(pSrc, nFileSize);

	//CComPtr<IConfigInMemory> pMemCfg;
	//RWCoCreateInstance(pMemCfg, __uuidof(ConfigInMemory));
	//if (FAILED(pMemCfg->DataBlockSet(nFileSize, cData.begin())))
	//	return E_FAIL;

	//static LONG const nSize = 0x80;
	//CAutoVectorPtr<TPixelChannel> pPixels(new TPixelChannel[nSize*nSize]);
	//static TPixelChannel const tEmpty = {0, 0, 0, 0};
	//static TPixelChannel const tFill = {50, 50, 200, 255};
	//for (LONG nY = 0; nY < nSize; ++nY)
	//{
	//	TPixelChannel* p = pPixels.m_p+(nY*nSize);
	//	float const f = fabsf(nY-nSize*0.5f-0.5f);
	//	float const f2 = f*f;
	//	float const f3 = ((nSize*nSize*9)>>6)-f2;
	//	if (f3 > 0.25f)
	//	{
	//			LONG const n = sqrtf(f3)+0.5f;
	//			LONG m = 0;
	//			if (nY > (nSize>>1))
	//			{
	//				float const g = fabsf(nY-nSize*0.65f-0.5f);
	//				float const g2 = g*g;
	//				float const g3 = ((nSize*nSize)>>7)-g2;
	//				if (g3 > 0.25f)
	//					m = sqrtf(g3)+0.5f;
	//			}
	//			std::fill_n(p, (nSize>>1)-n, tEmpty);
	//			std::fill_n(p+(nSize>>1)-n, n+n, tFill);
	//			if (m > 0)
	//				std::fill_n(p+int(nSize*0.35f)-m, m+m, tEmpty);
	//			std::fill_n(p+(nSize>>1)+n, nSize-((nSize>>1)+n), tEmpty);
	//	}
	//	else
	//	{
	//		std::fill_n(p, nSize, tEmpty);
	//	}
	//}
	//CComPtr<IDocument> pDocInit;
	//RWCoCreateInstance(pDocInit, __uuidof(DocumentBase));
	//CComPtr<IDocumentFactoryRasterImage> pFct;
	//RWCoCreateInstance(pFct, __uuidof(DocumentFactoryLayeredImage));
	//pFct->Create(NULL, CComQIPtr<IDocumentBase>(pDocInit), CImageSize(nSize, nSize), NULL, 1, CChannelDefault(EICIRGBA, 0, 0, 0, 0), 2.2f, CImageTile(nSize, nSize, pPixels));

	//CComPtr<IDocumentLayeredImage> pLI;
	//pDocInit->QueryFeatureInterface(__uuidof(IDocumentLayeredImage), reinterpret_cast<void**>(&pLI));
	//CComPtr<IEnumUnknowns> pLayers;
	//pLI->LayersEnum(NULL, &pLayers);
	//CComPtr<IComparable> pItem;
	//pLayers->Get(0, __uuidof(IComparable), reinterpret_cast<void**>(&pItem));
	//pLI->LayerEffectSet(pItem, pMemCfg);

	//return GetThumbnail(pDocInit, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, NULL);
}

HRESULT CThumbnailRenderer::GetBatchOperationThumbnail(IStorageFilter* a_pFile, ULONG a_nSizeX, ULONG a_nSizeY, DWORD* a_pBGRAData, RECT* a_prcBounds, LCID a_tLocaleID, BSTR* a_pbstrInfo)
{
	return E_FAIL;
	//CComPtr<IDataSrcDirect> pSrc;
	//a_pFile->SrcOpen(&pSrc);
	//ULONG nFileSize = 0;
	//if (pSrc == NULL || FAILED(pSrc->SizeGet(&nFileSize)) || nFileSize == 0)
	//{
	//	// TODO: message
	//	return E_FAIL;
	//}
	//CDirectInputLock cData(pSrc, nFileSize);

	//CComPtr<IConfigInMemory> pMemCfg;
	//RWCoCreateInstance(pMemCfg, __uuidof(ConfigInMemory));
	//if (FAILED(pMemCfg->DataBlockSet(nFileSize, cData.begin())))
	//	return E_FAIL;

	//static LONG const nSize = 0x80;
	//CAutoVectorPtr<TPixelChannel> pPixels(new TPixelChannel[nSize*nSize]);
	//static TPixelChannel const tEmpty = {0, 0, 0, 0};
	//static TPixelChannel const tFill = {200, 50, 50, 255};
	//for (LONG nY = 0; nY < nSize; ++nY)
	//{
	//	TPixelChannel* p = pPixels.m_p+(nY*nSize);
	//	float f = fabsf(nY-nSize*0.5f-0.5f);
	//	float f2 = f*f;
	//	float f3 = ((nSize*nSize*9)>>6)-f2;
	//	if (f3 > 0.25f)
	//	{
	//		LONG n = sqrtf(f3)+0.5f;
	//		std::fill_n(p, (nSize>>1)-n, tEmpty);
	//		std::fill_n(p+(nSize>>1)-n, n<<1, tFill);
	//		std::fill_n(p+(nSize>>1)+n, (nSize>>1)-n, tEmpty);
	//	}
	//	else
	//	{
	//		std::fill_n(p, nSize, tEmpty);
	//	}
	//}
	//CComPtr<IDocument> pDocInit;
	//RWCoCreateInstance(pDocInit, __uuidof(DocumentBase));
	//CComPtr<IDocumentFactoryRasterImage> pFct;
	//RWCoCreateInstance(pFct, __uuidof(DocumentFactoryLayeredImage));
	//pFct->Create(NULL, CComQIPtr<IDocumentBase>(pDocInit), CImageSize(nSize, nSize), NULL, 1, CChannelDefault(EICIRGBA, 0, 0, 0, 0), 2.2f, CImageTile(nSize, nSize, pPixels));

	//CConfigValue cDesc;
	//pMemCfg->ItemValueGet(CComBSTR(L"Description"), &cDesc);

	//CComPtr<IOperationManager> pOP;
	//RWCoCreateInstance(pOP, __uuidof(OperationManager));
	//CConfigValue cOpID;
	//pMemCfg->ItemValueGet(CComBSTR(L"Operation"), &cOpID);
	//CComPtr<IConfig> pOpCfg;
	//pOP->CreateConfig(cOpID, &pOpCfg);
	//CComPtr<IConfig> pSrcSub;
	//pMemCfg->SubConfigGet(CComBSTR(L"Operation"), &pSrcSub);
	//CopyConfigValues(pOpCfg, pSrcSub);
	//if (FAILED(pOP->CanActivate(pOP, pDocInit, cOpID, pOpCfg, NULL)))
	//	return E_FAIL;
	//if (FAILED(pOP->Activate(pOP, pDocInit, cOpID, pOpCfg, NULL, NULL, a_tLocaleID)))
	//	return E_FAIL;

	//return GetThumbnail(pDocInit, a_nSizeX, a_nSizeY, a_pBGRAData, a_prcBounds, a_tLocaleID, NULL);
}
